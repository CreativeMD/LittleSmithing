package com.littleforge.multitile.strucutres;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.lwjgl.util.Color;

import com.creativemd.creativecore.common.utils.math.Rotation;
import com.creativemd.creativecore.common.utils.mc.ColorUtils;
import com.creativemd.littletiles.common.action.LittleActionException;
import com.creativemd.littletiles.common.action.block.LittleActionActivated;
import com.creativemd.littletiles.common.structure.directional.StructureDirectional;
import com.creativemd.littletiles.common.structure.directional.StructureDirectionalField;
import com.creativemd.littletiles.common.structure.exception.CorruptedConnectionException;
import com.creativemd.littletiles.common.structure.exception.NotYetConnectedException;
import com.creativemd.littletiles.common.structure.registry.LittleStructureType;
import com.creativemd.littletiles.common.structure.relative.StructureAbsolute;
import com.creativemd.littletiles.common.structure.type.premade.LittleStructurePremade;
import com.creativemd.littletiles.common.tile.LittleTile;
import com.creativemd.littletiles.common.tile.math.box.LittleBox;
import com.creativemd.littletiles.common.tile.math.vec.LittleVec;
import com.creativemd.littletiles.common.tile.parent.IStructureTileList;
import com.creativemd.littletiles.common.tile.preview.LittlePreviews;
import com.creativemd.littletiles.common.util.grid.LittleGridContext;
import com.creativemd.littletiles.common.util.vec.SurroundingBox;

import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.item.ItemStack;
import net.minecraft.nbt.NBTTagCompound;
import net.minecraft.util.EnumFacing;
import net.minecraft.util.EnumHand;
import net.minecraft.util.math.AxisAlignedBB;
import net.minecraft.util.math.BlockPos;
import net.minecraft.util.math.Vec3d;
import net.minecraft.world.World;

public abstract class MultiTilePremade extends LittleStructurePremade {
    
    protected int seriesMaxium;
    protected String seriesName;
    protected int seriesAt;

    private LittleBox editArea;
    private Map<LittleBox, LittleTile> tilePosList = new HashMap<LittleBox, LittleTile>();

    public AxisAlignedBB relativePos;
    
    public MultiTilePremade(LittleStructureType type, IStructureTileList mainBlock) {
        super(type, mainBlock);
        //seriesName = type.id.toString().split("_")[0];
        //seriesAt = Integer.parseInt(this.type.id.toString().split("_")[1]);
    }
    
    @StructureDirectional
    public EnumFacing direction;

    @StructureDirectional
    public EnumFacing facing;
    
    @Override
    protected Object failedLoadingRelative(NBTTagCompound nbt, StructureDirectionalField field) {
        if (field.key.equals("facing"))
            return EnumFacing.UP;
        return super.failedLoadingRelative(nbt, field);
    }
    
    public LittlePreviews updateStructureDirection(LittlePreviews previews, SurroundingBox box, BlockPos min) {
        BlockPos boxPos = box.getMinPos();
        AxisAlignedBB aabb = new AxisAlignedBB(boxPos);
        /*
        LittleGridContext context = LittleGridContext.get(contextSize);
        RayTraceResult res = plr.rayTrace(6.0, (float) 0.1);
        LittleAbsoluteVec pos = new LittleAbsoluteVec(res, context);
        
        long x = context.toGridAccurate(result.hitVec.x);
        long y = context.toGridAccurate(result.hitVec.y);
        long z = context.toGridAccurate(result.hitVec.z);
        this.pos = new BlockPos((int) Math.floor(context.toVanillaGrid(x)), (int) Math.floor(context.toVanillaGrid(y)), (int) Math.floor(context.toVanillaGrid(z)));
        this.contextVec = new LittleVecContext(new LittleVec((int) (x - context.toGridAccurate(pos.getX())), (int) (y - context.toGridAccurate(pos.getY())), (int) (z - context.toGridAccurate(pos.getZ()))), context);
        */
        LittleGridContext context = box.getContext();
        StructureAbsolute absolute = new StructureAbsolute(boxPos, box.getAbsoluteBox().box, context);
        
        System.out.println(box.getAbsoluteBox().getDoubledCenter(boxPos) + " " + absolute.getDoubledCenterVec());
        switch (direction) {
        case NORTH:
            previews.rotatePreviews(Rotation.Y_CLOCKWISE, absolute.getDoubledCenterVec());
            break;
        case SOUTH:
            //previews.rotatePreviews(Rotation.Y_COUNTER_CLOCKWISE, box.getAbsoluteBox().getDoubledCenter(min));
            break;
        case WEST:
            //previews.rotatePreviews(Rotation.Y_CLOCKWISE, box.getAbsoluteBox().getDoubledCenter(min));
            //previews.rotatePreviews(Rotation.Y_CLOCKWISE, box.getAbsoluteBox().getDoubledCenter(min));
            break;
        default:
            break;
        }
        
        return previews;
    }
    
    @Override
    public boolean onBlockActivated(World worldIn, LittleTile tile, BlockPos pos, EntityPlayer playerIn, EnumHand hand, ItemStack heldItem, EnumFacing side, float hitX, float hitY, float hitZ, LittleActionActivated action) throws LittleActionException {
        relativePos = this.getSurroundingBox().getAABB();
        
        try {
            collectAllTiles();
        } catch (CorruptedConnectionException | NotYetConnectedException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        return false;
    }
    
    @Override
    protected void loadFromNBTExtra(NBTTagCompound nbt) {}
    
    @Override
    protected void writeToNBTExtra(NBTTagCompound nbt) {}
    
    protected String nextSeries() {
        //if (seriesMaxium > seriesAt) {
        //  return seriesName + "_" + (seriesAt + 1);
        //}
        return "";
    }
    
    /***
     * @param box
     * Set it to the area you want to edit.
     */
    public void setEditArea(LittleBox box) {
        editArea = box;
    }
    
    /***
     * Removes Alpha color from the premade structure. 
     */
    public void removeAlpha() {
        for (LittleBox littleBox : tilePosList.keySet()) {
            if(LittleBox.intersectsWith(littleBox, editArea)) {
                LittleTile littleTile = tilePosList.get(littleBox);
                
                NBTTagCompound nbt = new NBTTagCompound();
                littleTile.saveTileExtra(nbt);
                
                int color = ColorUtils.WHITE;
                if(nbt.hasKey("color")) {
                    color = nbt.getInteger("color");
                    Color c = ColorUtils.IntToRGBA(color);
                    c.setAlpha(255);
                    color = ColorUtils.RGBAToInt(c);
                }
                nbt.setInteger("color", color);
                littleTile.loadTileExtra(nbt);
            }
            
        }
    }
    
    public void editTilesColor(int r, int g, int b, int a) {
        /*
        for (LittleTile littleTile : tileList) {
            int color = ColorUtils.RGBAToInt(r, g, b, a);
            NBTTagCompound nbt = new NBTTagCompound();
            littleTile.saveTileExtra(nbt);
            nbt.setInteger("color", color);
            littleTile.loadTileExtra(nbt);
            
        }
        */
    }
    
    /**
     * 
     * @return
     * Returns the adjusted vec
     */
    private Vec3d[] adjustRelativeVec(BlockPos pos, LittleBox box) {
        Vec3d relativeVec[] = new Vec3d[2];

        double aMinX = 0, aMinY = 0, aMinZ = 0;
        double aMaxX = 0, aMaxY = 0, aMaxZ = 0;
        
        switch (direction) {
        case NORTH:
            aMinX = (box.maxZ/16D)+pos.getZ()-relativePos.maxZ;
            aMinY = (box.minY/16D)+pos.getY()-relativePos.minY;
            aMinZ = (box.minX/16D)+pos.getX()-relativePos.minX;
            
            aMaxX = (box.minZ/16D)+pos.getZ()-relativePos.maxZ;
            aMaxY = (box.maxY/16D)+pos.getY()-relativePos.minY;
            aMaxZ = (box.maxX/16D)+pos.getX()-relativePos.minX;
            break;
        case EAST:
            aMinX = (box.minX/16D)+pos.getX()-relativePos.minX;
            aMinY = (box.minY/16D)+pos.getY()-relativePos.minY;
            aMinZ = (box.minZ/16D)+pos.getZ()-relativePos.minZ;
            
            aMaxX = (box.maxX/16D)+pos.getX()-relativePos.minX;
            aMaxY = (box.maxY/16D)+pos.getY()-relativePos.minY;
            aMaxZ = (box.maxZ/16D)+pos.getZ()-relativePos.minZ;
            break;
        case SOUTH:
            aMinX = (box.minZ/16D)+pos.getZ()-relativePos.minZ;
            aMinY = (box.minY/16D)+pos.getY()-relativePos.minY;
            aMinZ = (box.maxX/16D)+pos.getX()-relativePos.maxX;
            
            aMaxX = (box.maxZ/16D)+pos.getZ()-relativePos.minZ;
            aMaxY = (box.maxY/16D)+pos.getY()-relativePos.minY;
            aMaxZ = (box.minX/16D)+pos.getX()-relativePos.maxX;
            break;
        case WEST:
            aMinX = (box.maxX/16D)+pos.getX()-relativePos.maxX;
            aMinY = (box.minY/16D)+pos.getY()-relativePos.minY;
            aMinZ = (box.maxZ/16D)+pos.getZ()-relativePos.maxZ;
            
            aMaxX = (box.minX/16D)+pos.getX()-relativePos.maxX;
            aMaxY = (box.maxY/16D)+pos.getY()-relativePos.minY;
            aMaxZ = (box.minZ/16D)+pos.getZ()-relativePos.maxZ; 
            break;
        default:
            
            break;
        }
        relativeVec[0] = new Vec3d(Math.abs(aMinX), Math.abs(aMinY), Math.abs(aMinZ));
        relativeVec[1] = new Vec3d(Math.abs(aMaxX), Math.abs(aMaxY), Math.abs(aMaxZ));
        return relativeVec;
    }
    
    /***
     * Collects all tiles within the structure. It assigns each tile a box relative to the structure itself.
     * Meaning minimum corner of the structure is considered 0,0,0.
     */
    public void collectAllTiles() throws CorruptedConnectionException, NotYetConnectedException {
        for (IStructureTileList iStructureTileList : this.blocksList()) {
            iStructureTileList.getTe().updateTiles((a) -> {
                IStructureTileList list = a.get(iStructureTileList);
                List<LittleTile> tileLs = new ArrayList<LittleTile>();
                BlockPos pos = iStructureTileList.getTe().getPos();
                int x = 0;
                for(LittleTile littleile : list) {
                    x++;
                    Vec3d relativeVec[] = adjustRelativeVec(pos, littleTile.getBox());
                    Vec3d relativeMin = relativeVec[0];
                    Vec3d relativeMax = relativeVec[1];
                    LittleBox relativeBox = new LittleBox(new LittleVec((int) (relativeMin.x*16), (int) (relativeMin.y*16), (int) (relativeMin.z*16)), 
                            new LittleVec((int) (relativeMax.x*16), (int) (relativeMax.y*16), (int) (relativeMax.z*16)));

                    tilePosList.put(relativeBox, littleTile);
                }
            });
        }
    }
}
